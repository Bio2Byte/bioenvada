// this is a comment, and it is here to help you!


params.executionTimestamp = new java.text.SimpleDateFormat("yyyy_MM_dd_HH_mm_ss").format(new Date())

// Input file
params.targetSequences  = "$launchDir/example.fasta"

params.preprocessing    = 'protein' //'protein' or "proteome"
params.orthologIDLen    = 0..10 //id must always be in same position, eg 0,1,2,3,4,5,6,7,8,9,10 th letter of the seqlabel; not "0..10"; cant be changed in cmdline!
params.type             = 'nuc' // can also be 'aa'
params.filterValid      = false //'identifierOfAnIvalidSequence'
params.qc               = false // --qc only removes empty columns, --qc '0.8' removes columns with less then 80% occupancy

// Conda environment path (type in terminal: conda env list)
params.condaEnvPath     = '/Users/me/miniconda3/envs/my_env'

// Data reduction
params.clustering       = false
params.relabel          = false

// Alignment and tree building
params.alignSequences   = false
params.nucToMap         = false //path to nuc file if to be mapped to target seqs
params.buildTree        = false
params.buildTreeEvo     = false //use this for ancestral sequence reconstruction

// Available predictors:
    //bio2byt tools
params.dynamine         = true
params.efoldmine        = false
params.disomine         = false
params.agmata           = false

    //structure
params.fetchStructures  = false

    //evolutinary pressure
params.outGroup         = false //'partialLabelOutGroup'
params.eteEvol          = false     
params.csubst           = false 
params.branchIds        = false //'1,2,3'

// Output files
params.plotBiophysicalFeatures = false
params.selectedProteins = false //'partialLabel1,partialLabel2'
params.buildLogo               = false
params.plotTree                = false

params.groupInfo =false // can be csv strain \t category
params.cladePlots = false
params.b2bfigwidth ='' //10  [in cm] 
params.b2boccupancy ='' // 50 [%]

params.outName          = "bioenvada_${params.executionTimestamp}"
params.outFolder           = "${launchDir}/results/${params.outName}"


//report {
//    enabled = true
//    file = "results/bioenvada_${params.executionTimestamp}.html"
//    overwrite = true
//}

//If you want to run without docker on your local HPC, adapt the modules! It may be usefule to comment out the container line, too.
/*process {

    conda = params.condaEnvPath
    container   = 'slheidig/csubst'
        
    withName: 'predictBiophysicalFeatures' {
        label       = 'tinysnail'
        container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
        //container = 'diazadriang/b2b-tools-public'
    }

    withName: 'buildMultipleSequenceAlignmentNuc' {
        label       = 'bigboy'
        container   = 'reslp/macse:2.05'
        //module    = 'MAFFT/7.505-GCC-11.3.0-with-extensions' 
    }

    withName: 'buildMultipleSequenceAlignmentAA' {
        label       = 'bigboy'
        container   = 'biocontainers/clustal-omega:v1.2.1_cv5'
    }
    
    withName: 'takeMultipleSequenceAlignment' {
        container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
    }

    withName: 'takeMultipleSequenceAlignmentNuc' {
        container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
    }
    
    withName: 'mapMSA' {
        container   = 'reslp/macse:2.05'
        //container= 'macsedock'
    }
    
    withName: 'buildPhylogeneticTree' {
        label       = 'bigboy'
        container   = 'reslp/iqtree:2.0.7'
        // module   = 'FastTree/2.1.11-GCCcore-11.3.0'
    }

    withName: 'buildPhylogeneticTreeEvol' {
        label       = 'bigboy'
        container   = 'reslp/iqtree:2.0.7'
    }

    withName: 'buildLogo' {
        container   = 'quay.io/biocontainers/weblogo:3.7.9--pyhdfd78af_0'
    }

    withName: 'plotBiophysicalFeatures' {
        container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
    }
    
    withName: cdHitClustering{
        container   = 'chrishah/cdhit:v4.8.1'
        //module    = 'CD-HIT/4.8.1-GCC-11.3.0'
    }

    withName: plotPhylogeneticTree{
        container   = 'slheidig/ad_ete3'
    }

    withName: runEteEvol{
        label       = 'tinysnail'
        container   = 'slheidig/ad_ete3'
    }
    withName: treeToClade{
        label       = 'tinysnail'
        //params.condaEnvPath='/Users/sophie/miniconda3/envs/tree_to_cluster'
        container= 'slheidig/ete4:01'
    }

    withName: cladePlots{
        label       = 'tinysnail'
        //params.condaEnvPath='/Users/sophie/miniconda3/envs/tree_to_cluster'
        container= 'slheidig/ete4:01'
    }
    
}
*/
profiles {
    standard {
        process {
            executor = 'local'
            cpus = '4'
            withName: 'buildPhylogeneticTreeEvol' {cpus = '10'}
            withName: runEteEvol{container   = 'slheidig/ad_ete3'}
        }
    }

    hydra {
        singularity { 
                enabled = true
                cacheDir = "$VSC_SCRATCH_VO_USER/.apptainer"
        }
        process {
            executor = 'slurm'
            cpus ='1'
            memory ='4.GB'
            time ='10min'
            //clusterOptions '--mail-type=ALL'
            //module = 'Biopython/1.83-foss-2023a:SciPy-bundle'
            container   = 'slheidig/csubst'
            withLabel: tinysnail {
                cpus = '1'
                memory = '7.GB'
                time ='10h'
            }

            withLabel: bigboy {
                cpus = '20'
                memory = '40GB'
                time ='10h'
                //clusterOptions ='--mail-type=ALL'
            }

            withName: 'predictBiophysicalFeatures' {
                label       = 'tinysnail'
                
                container   ='bio2byte/b2btools:3.0.7b3-pkg_py3.12-linux64'
                //container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
            }
        //container = 'diazadriang/b2b-tools-public'
    
    //withName: 'takeMultipleSequenceAlignment' {   container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'}

   // withName: 'takeMultipleSequenceAlignmentNuc' {container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'}
    
  //  withName: 'mapMSA' { container   = 'slheidig/macse207:03'
        //container   = 'reslp/macse:2.05' }
    
    withName: 'buildPhylogeneticTree' {
        label       = 'bigboy'
        module   = 'FastTree/2.1.11-GCCcore-11.3.0'
    }

    withName: 'buildPhylogeneticTreeEvol' {
        label       = 'bigboy'
        module = 'IQ-TREE/2.2.2.7-gompi-2023a'
    }

    withName: 'buildLogo' {
        container   = 'quay.io/biocontainers/weblogo:3.7.9--pyhdfd78af_0'
    }

    withName: 'plotBiophysicalFeatures' {

        container   ='bio2byte/b2btools:3.0.7b3-pkg_py3.12-linux64'
        //container   = 'quay.io/biocontainers/b2btools:3.0.5--pyhdfd78af_0'
    }
    
    withName: cdHitClustering{
        module    = 'CD-HIT/4.8.1-GCC-11.3.0'
    }

    withName: plotPhylogeneticTree{
        container   = 'slheidig/ad_ete3'
    }

    withName: runEteEvol{
        label       = 'tinysnail'
        container   = 'slheidig/ad_ete3'
    }
    withName: treeToClade{
        //params.condaEnvPath='/Users/sophie/miniconda3/envs/tree_to_cluster'
        container= 'slheidig/ete4:01'
    }

    withName: cladePlots{
        module="matplotlib/3.5.2-foss-2022a:Biopython/1.79-foss-2022a:SciPy-bundle/2022.05-foss-2022a"
        //params.condaEnvPath='/Users/sophie/miniconda3/envs/tree_to_cluster'
    //    container= 'slheidig/ete4:01'
    }
        
        }
    }

    withdocker {
        docker.enabled = true
        singularity.enabled = false

        docker.temp = 'auto'
    }

    withsingularity {
        docker.enabled = false
        singularity {
            enabled = true
            cacheDir = "$VSC_SCRATCH_VO_USER/.apptainer"
            runOptions = "-B /run"
        }
    }


    withconda {
        conda.enabled = true
    }
}
